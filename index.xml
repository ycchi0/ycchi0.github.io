<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Ycchi0 Blog</title>
    <link>https://ycchi0.github.io/</link>
    <description>Recent content on Ycchi0 Blog</description>
    <generator>Hugo -- 0.123.7</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 28 May 2024 08:50:13 +0000</lastBuildDate>
    <atom:link href="https://ycchi0.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CSS清除浮动</title>
      <link>https://ycchi0.github.io/posts/css%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</link>
      <pubDate>Tue, 28 May 2024 08:50:13 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/css%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</guid>
      <description>谈谈 BFC 当一个盒子没有设置 height, 而子盒子又都设置浮动时，此时这个盒子会塌陷。 如下：
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; .box { width: 600px; border: 10px solid #a89393; } .box .c1 { width: 300px; height: 200px; background-color: orange; float: left; } .box .c2 { width: 300px; height: 200px; background-color: blue; float: left; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;box&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;c1&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;c2&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 造成这个现象的原因，就是这个父盒子没有产生 BFC。
那么什么是 BFC 呢 ？ 根据 MDN 的定义，BFC(区块格式化上下文)是 Web 页面的可视 CSS 渲染的一部分，是块级盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。 下列方式会创建块格式化上下文： 本质上来说，只要创建了 BFC,浮动的问题就解决了。</description>
    </item>
    <item>
      <title>Box Sizing</title>
      <link>https://ycchi0.github.io/posts/box-sizing/</link>
      <pubDate>Fri, 24 May 2024 02:53:44 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/box-sizing/</guid>
      <description>CSS 中的 box-sizing 属性定义了 user agent 应该如何计算一个元素的总宽度和总高度。
怎么理解呢？
首先先明确一点，默认情况下，元素的宽度(width) 和高度(height)计算方式为：
width(宽度) + padding(内边距) + border(边框) = 元素实际宽度 height(高度) + padding(内边距) + border(边框) = 元素实际高度
而 box-sizing 属性可以被用来调整这些表现
content-box 是默认值。如果你设置一个元素的宽为 100px，那么这个元素的内容区会有 100px 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。 border-box ：设置的边框和内边距的值是包含在 width 内的。也就是说，如果你将一个元素的 width 设为 100px，那么这 100px 会包含它的 border 和 padding，内容区的实际宽度是 width 减去 (border + padding) 的值。大多数情况下，这使得我们更容易地设定一个元素的宽高。 我们来看下面的图： content-box 情况： border-box 情况： 浏览器兼容性如下： 参考文档MDN box-sizing</description>
    </item>
    <item>
      <title>CSS 浮动</title>
      <link>https://ycchi0.github.io/posts/css%E6%B5%AE%E5%8A%A8/</link>
      <pubDate>Thu, 23 May 2024 18:22:30 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/css%E6%B5%AE%E5%8A%A8/</guid>
      <description>先谈谈浮动 float 很多网站的布局都是通过 float 实现的，浮动最本质的功能就是用来实现并排。
一个例子 先来看一个例子，有三个未设置浮动的盒子，代码如下：
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; .box { width: 600px; height: 200px; border: 1px solid #000; } .box .c1 { width: 200px; height: 200px; background-color: orange; /* float: left; */ } .box .c2 { width: 200px; height: 200px; background-color: green; /* float: left; */ } .box .c3 { width: 200px; height: 200px; background-color: blue; /* float: left; */ } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;box&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;c1&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;c2&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;c3&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 当我们给三个盒子都设置浮动，即取消上面代码注释部分，盒子便可以横向编排。 浮动使用要点 浮动在使用时，有两个要点</description>
    </item>
    <item>
      <title>Art Template</title>
      <link>https://ycchi0.github.io/posts/art-template/</link>
      <pubDate>Thu, 23 May 2024 16:59:54 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/art-template/</guid>
      <description>art-template art-template 是一个简约、超快的模板引擎。采用作用域预声明的技术来优化模板渲染速度，从而获得接近 JavaScript 极限的运行性能，并且同时支持 NodeJS 和浏览器。
在一些动态渲染场景，使用 art-template 可以将 JS 代码与 Html 代码分开管理，便于项目维护。
比如说后端获取到一个 students 对象数组，现在要在界面上以列表的形式展示，我们可能会这样编写代码
student 对象数组为：
const students = [ { name: &amp;#34;xxx&amp;#34;, age: 18, }, { name: &amp;#34;yyy&amp;#34;, age: 28, }, { name: &amp;#34;zzz&amp;#34;, age: 20, }, ]; 使用模板字符串
const list = document.getElementById(&amp;#39;list&amp;#39;); let html = &amp;#39;&amp;#39;; for (const student of students) { html += `&amp;lt;li&amp;gt;${student.name} ${student.age}&amp;lt;/li&amp;gt;`; } list.innerHTML = html; 使用 art-template：
&amp;lt;script id=&amp;#34;tpl-students&amp;#34; type=&amp;#34;text/html&amp;#34;&amp;gt; {{each students}} &amp;lt;li&amp;gt;{{$value.</description>
    </item>
    <item>
      <title>谈谈Cookie</title>
      <link>https://ycchi0.github.io/posts/%E8%B0%88%E8%B0%88cookie/</link>
      <pubDate>Thu, 23 May 2024 15:30:15 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/%E8%B0%88%E8%B0%88cookie/</guid>
      <description>Cookie 是什么 Cookie 全称 HTTP Cookie，简称 Cookie,是浏览器存储数据的一种方式。Cookie 存储在用户本地，一般会自动随着浏览器每次请求发送到服务器端。
打开浏览器开发者工具，如下： Cookie 有什么用 可以利用 Cookie 跟踪统计用户访问该网站的习惯，比如什么时间访问，访问了哪些页面，在每个网页的停留时间等
注意：不要在 Cookie 中保存密码等敏感信息
Cookie 的基本用法 写入 Cookie &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script&amp;gt; document.cookie = &amp;#34;username=zs&amp;#34;; document.cookie = &amp;#34;age=18&amp;#34;; &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 读取 Cookie &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script&amp;gt; console.log(document.cookie); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Cookie 属性 最重要的两个属性 Cookie 的名称（Name）和值（Value） 是最重要的两个属性，创建 时必须填写，其它属性可以使用默认值。</description>
    </item>
    <item>
      <title>Webpack 从入门到放弃</title>
      <link>https://ycchi0.github.io/posts/webpack/</link>
      <pubDate>Thu, 23 May 2024 08:05:20 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/webpack/</guid>
      <description>Webpack 是什么 首先，webpack 是一个打包工具，它会根据代码的内容解析模块依赖，帮助我们把多个模块的代码打包。
借助一个官网的截图，让你感受一下 webpack 的强大。
日常使用的前端开发环境应该是怎样的？我们可以尝试着把基本前端开发环境的需求列一下：
构建我们发布需要的 HTML、CSS、JS 文件 使用 CSS 预处理器来编写样式 使用 Babel 来支持 ES 新特性 本地提供静态服务以方便开发调试 &amp;hellip;. 这些需求，使用 webpack 都可以较好的满足。
webpack 官方手册地址
先从一个简单的项目开始 1.初始化项目
npm init 2.安装 webpack 需要的包
npm install --save-dev webpack-cli@3.3.12 webpack@4.44.1 3.配置 webpack
在工程文件夹内新建 webpack.config.js
const path = require(&amp;#34;path&amp;#34;); module.exports = { entry: &amp;#34;./src/index.js&amp;#34;, output: { path: path.resolve(__dirname, &amp;#34;dist&amp;#34;), filename: &amp;#34;bundle.js&amp;#34;, }, }; 在 package.json 文件添加script命令：
&amp;#34;webpack&amp;#34;: &amp;#34;webpack --config webpack.config.js&amp;#34; 此时工程目录如下： 4.编译并测试
npm run webpack 执行命令后会发现工程目录下生成了 dist/bundle.</description>
    </item>
    <item>
      <title>Javascript Module 详解</title>
      <link>https://ycchi0.github.io/posts/javascript_module/</link>
      <pubDate>Wed, 22 May 2024 12:26:48 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/javascript_module/</guid>
      <description>什么是模块(Module) 模块，在 Js 可以看成一个一个局部作用域的代码块。
我们写代码时需要注意高内聚，低耦合，这就需要用到模块系统。它能帮助我们更好的划分代码功能，增加代码复用性，便于维护程序。
引入模块系统的好处：
代码模块化管理，便于复用 消除过多全局变量 管理加载顺序 Module 基本用法 一个文件就是一个模块。 如下是一个基本的用法： person.js
class Person { constructor(name) { this.name = name; } sayHi() { console.log(&amp;#34;hi&amp;#34;); } } export default Person; student.js
import Person from &amp;#34;./person&amp;#34;; class Student extends Person { constructor(name, age) { super(name); this.age = age; } } export default Student; index.js
import Student from &amp;#34;./student&amp;#34;; let s = new Student(&amp;#34;zs&amp;#34;,10); script 标签加载的时候，需要加上 type=&amp;ldquo;module&amp;rdquo; demo.html
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.</description>
    </item>
    <item>
      <title>Javascript ES6 Class 深入浅出</title>
      <link>https://ycchi0.github.io/posts/javascript_es6_class/</link>
      <pubDate>Wed, 22 May 2024 01:29:33 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/javascript_es6_class/</guid>
      <description>初识 Class Javascript 中的类基于 Prototype 创建，一般类需要大写。 下面是一个简单的 Person 类示例，constructor 是构造函数，用来给类的对象进行初始化。
class Person { constructor(name, age) { //this 代表实例对象，上面定义的是实例属性/方法 this.name = name; this.age = age; } // 各实例共享的方法 sayHi() { console.log(&amp;#34;sayHi&amp;#34;); } } let zs = new Person(&amp;#34;zhangsan&amp;#34;, 18); zs.sayHi(); 上面的 Person 类等同于下面 Prototype-based 写法
function Person(name, age) { this.name = name; this.age = age; } Person.prototype.sayHi = function () { console.log(&amp;#34;Prototype-based&amp;#34;); }; let zs = new Person(&amp;#34;zhangsan&amp;#34;, 18); zs.sayHi(); 立即执行的匿名类 new (class { constructor() { console.</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Ycchi0 Blog</title>
    <link>https://ycchi0.github.io/posts/</link>
    <description>Recent content in Posts on Ycchi0 Blog</description>
    <generator>Hugo -- 0.123.7</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 30 May 2024 06:44:34 +0000</lastBuildDate>
    <atom:link href="https://ycchi0.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Explain详解与索引最佳实践</title>
      <link>https://ycchi0.github.io/posts/explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Thu, 30 May 2024 06:44:34 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>Explain Explain是MySQL中的一个非常有用的工具，它可以帮助我们理解MySQL是如何执行SQL查询的。
通过使用Explain，我们可以看到查询的执行计划，包括使用了哪些索引，表的连接顺序，预计要扫描的行数等信息。
这些信息可以帮助我们优化查询，提高查询效率。
EXPLAIN SELECT * FROM users WHERE id = 1; Explain的结果包含以下几个重要的列：
id 查询的标识符，如果一个查询包含多个子查询，那么每个子查询都会有一个不同的id。
select_type 表示对应行是简单还是复杂的查询。
simple：简单查询。查询不包含子查询和union primary：复杂查询中最外层的 select subquery：包含在 select 中的子查询（不在 from 子句中） derived：包含在 from 子句中的子查询。MySQL会将结果存放在一个临时表中，也称为派生表（derived的英文含义） CREATE TABLE customers ( id INT PRIMARY KEY, name VARCHAR(50) ); CREATE TABLE orders ( id INT PRIMARY KEY, customer_id INT, amount DECIMAL(10, 2) ); INSERT INTO customers (id, name) VALUES (1, &amp;#39;John&amp;#39;), (2, &amp;#39;Jane&amp;#39;), (3, &amp;#39;Bob&amp;#39;); INSERT INTO orders (id, customer_id, amount) VALUES (1, 1, 100.</description>
    </item>
    <item>
      <title>深入理解MySQL索引底层数据结构</title>
      <link>https://ycchi0.github.io/posts/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3mysql%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Thu, 30 May 2024 05:27:40 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3mysql%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>索引是什么 索引是帮助MySQL高效获取数据的排好序的数据结构。
InnoDB 索引实现 InnoDB 存储引擎使用一种称为 B+Tree 的数据结构来实现其索引。B+Tree 是 B-Tree 的一种变体，它在数据库索引中的应用非常广泛。
B+树是一种自平衡的树，可以保持数据有序。这种数据结构可以大大加快数据的检索速度，尤其是在处理大量数据时。
在B+树中，所有的数据都存储在叶子节点，而非叶子节点只存储关键字和子节点的指针。
同时，叶子节点之间通过指针相连，这样可以提高范围查询的效率。MySQL 对b+ 树做了优化,叶子节点之间是双向连接，标准的 b+ 树是从左指向右,单向连接
此外，MySQL还支持哈希索引，但是哈希索引只能满足&amp;quot;=&amp;quot;,&amp;ldquo;IN&amp;rdquo; 和&amp;quot;&amp;lt;=&amp;gt;&amp;ldquo;查询，不能使用范围查询和排序，所以B+树是MySQL的主要索引结构。
InnoDB 存储引擎有两种类型的索引：主键索引（聚簇索引）和二级索引（非聚簇索引）。
主键索引 InnoDB 的数据是按照主键顺序存放的，也就是说主键索引的叶子节点就是数据节点。因此，按照主键查询可以直接通过索引找到数据，效率非常高。
二级索引 二级索引的叶子节点并不包含行记录的全部数据。相反，它的叶子节点包含的是对应行数据的主键值。当通过二级索引查找时，InnoDB 会先找到二级索引指向的主键，然后再通过主键索引找到完整的行数据。这就是所谓的“回表”。
MyISAM 的索引 MyISAM索引文件和数据文件是分离的。在MyISAM存储引擎中，每个表被存储为三个文件。一个是表定义文件（.frm），一个是数据文件（.MYD），还有一个是索引文件（.MYI）。
数据文件和索引文件是分离的，这也是MyISAM的一个特点。 数据文件存储了表的数据，而索引文件则存储了表的索引信息。这种分离的设计使得MyISAM在处理大量数据时具有一定的优势，因为索引和数据可以分别进行IO操作，提高了数据处理的效率。
但是，这种设计也有一些缺点。例如，如果在操作过程中发生故障，可能会导致数据文件和索引文件之间的不一致，从而影响数据的完整性。此外，MyISAM不支持事务，这也是其在某些场景下被InnoDB等其他存储引擎所取代的原因。
为什么建议InnoDB表必须建主键，并且推荐使用整型的自增主键？ InnoDB 存储引擎在存储数据时，会按照主键的顺序进行存储。
如果没有主键，InnoDB 会选择一个唯一非空索引代替，如果这样的索引也没有，InnoDB 会生成一个隐藏的聚簇索引。
这个隐藏的聚簇索引会占用额外的存储空间，而且由于它不是由用户定义的，所以在执行查询时可能会导致性能下降。
使用整型的自增主键有以下几个优点：
整型的自增主键可以保证数据的插入顺序，这样可以避免页面分裂，提高插入效率 整型的自增主键占用的空间小，可以减少索引的存储空间，提高查询效率。 自增主键可以避免主键的重复，保证数据的唯一性。 使用自增主键，可以避免在插入数据时需要手动指定主键值，简化了插入操作 为什么非主键索引结构叶子节点存储的是主键值？ 简单来说就是为了一致性和节省存储空间。
在InnoDB存储引擎中，非主键索引（也称为二级索引）的叶子节点存储的是主键值，这是由InnoDB的存储结构决定的。
InnoDB使用聚簇索引（也就是主键索引）来存储数据，这意味着表中的数据实际上是按照主键的顺序存储的。因此，主键值实际上就是数据行在物理存储上的地址。
当我们通过非主键索引进行查询时，InnoDB首先会在非主键索引中查找到主键值，然后再通过主键值在聚簇索引中查找到实际的数据行。这个过程通常被称为“回表”。
这样设计的好处是，非主键索引可以更小，因为它只需要存储主键值，而不需要存储整行数据。这可以节省存储空间，提高IO效率。同时，由于所有的非主键索引都引用了主键，所以在更新数据时，只需要更新聚簇索引，而不需要更新每一个非主键索引，这也可以提高更新操作的效率。
但是，这也意味着如果频繁地进行非主键索引查询，可能会导致大量的“回表”操作，从而影响查询性能。因此，在设计数据库时，需要根据实际的查询需求来合理选择使用主键索引还是非主键索引。
索引最左前缀原理 最左前缀原理，也被称为最左前缀匹配原则，是指在多列索引中，查询可以只使用索引的最左边的一部分，但必须是连续的部分。这是因为多列索引是按照列的顺序，从左到右进行排序的。
例如，如果我们有一个包含三列（A，B，C）的索引，那么以下查询可以使用索引： 查询只涉及到 A 列。 查询涉及到 A 和 B 列。 查询涉及到 A，B 和 C 列。
但是，如果查询只涉及到 B 列或者 C 列，或者涉及到 A 和 C 列（跳过了 B 列），那么索引将不会被使用。这就是最左前缀原理。</description>
    </item>
    <item>
      <title>常见的限流算法</title>
      <link>https://ycchi0.github.io/posts/%E5%B8%B8%E8%A7%81%E7%9A%84%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 28 May 2024 11:11:22 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/%E5%B8%B8%E8%A7%81%E7%9A%84%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/</guid>
      <description>限流 通过限制并发访问数或者限制一个时间窗口内允许处理的请求数量来保护系统，例如，通过限流，你可以过滤掉产生流量峰值的客户和服务。
令牌桶算法 令牌桶算法是常见的一种限流算法。假设有一个桶，以固定速度（rate）往桶里加入令牌（token）。当桶满了时停止加入。服务收到请求时尝试从桶里取出令牌。如果成功取出，则可以响应本次请求。如果没有取到，可以进行有限时间的等待或者返回超时错误。
特点 遇到流量洪峰时可以应对部分突发流量，但由于桶有容量上限，当消耗完桶里堆积的令牌之后只能根据令牌的生成速率提供服务，从而起到限流的作用。
Golang 实现 Golang rate包提供了 token limiter 的实现,具体可以点击链接查看rate package
漏桶算法 一个固定容量的漏桶，按照常量固定速率流出水滴，这里的水滴指的就是能进行响应的请求。当漏桶满了时，请求就会被丢弃，返回一个限流标志。
特点 流量均匀，一般作为计量工具，可以用于流量整形和流量控制。比方说对数据库的操作。经过一层漏桶控制，可以有效控制对数据库的请求，避免数据库被打挂。流量稳定，但是无法应对突发流量。
Golang 实现 uber 开源了一个基于漏桶的限流器ratelimit
func main() { rl := ratelimit.New(1) // per second for i := 0; i &amp;lt; 10; i++ { now := rl.Take() if i &amp;gt; 0 { fmt.Println(i, now) } } } 1 2022-03-24 02:24:51.57952663 2 2022-03-24 02:24:52.579526624 3 2022-03-24 02:24:53.579526623 4 2022-03-24 02:24:54.579526617 5 2022-03-24 02:24:55.579526616 6 2022-03-24 02:24:56.</description>
    </item>
    <item>
      <title>Golang异常处理</title>
      <link>https://ycchi0.github.io/posts/golang%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Tue, 28 May 2024 11:02:44 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/golang%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>从error的定义说起 type error interface { Error() string } Go 的error类型是一个接口。在Go中，只要实现了接口约定的方法，就等同于实现了这个接口。在日常的业务代码编写中，我们经常使用 errors 包下的New 方法来生成一个error对象。
func main() { err := errors.New(&amp;#34;a error&amp;#34;) fmt.Println(reflect.TypeOf(err))//*errors.errorString } 可以发现，err 是一个指针类型，为什么这里的 err 需要是一个指针呢？
// Each call to New returns a distinct error value even if the text is identical. func New(text string) error { return &amp;amp;errorString{text} } 查看errors包的代码，我们知道返回指针是为了确保err的唯一性。
以下的代码是返回一个变量会引起的问题。
type ValueError string func (ve ValueError) Error() string { return string(ve) } func New(text string) error { return ValueError(text) } func main() { simpleError := New(&amp;#34;error&amp;#34;) complexError := New(&amp;#34;error&amp;#34;) if simpleError == complexError { fmt.</description>
    </item>
    <item>
      <title>服务治理之布隆过滤器</title>
      <link>https://ycchi0.github.io/posts/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E4%B9%8B%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</link>
      <pubDate>Tue, 28 May 2024 11:01:20 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E4%B9%8B%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</guid>
      <description>布隆过滤器 布隆过滤器（英语：Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。元素可以添加到集合中，但不能删除(计数布鲁姆过滤器变体支持删除);
作用 布隆过滤器可以用于判断一个元素可能存在或者一定不存在。
参考文章 Bloom filter https://segmentfault.com/a/1190000021136424 go-zero 中的实现 go-zero 中基于 redis 实现了布隆过滤器 通过 lua 脚本 setbit 和 getbit
setScript = ` for _, offset in ipairs(ARGV) do redis.call(&amp;#34;setbit&amp;#34;, KEYS[1], offset, 1) end ` testScript = ` for _, offset in ipairs(ARGV) do if tonumber(redis.call(&amp;#34;getbit&amp;#34;, KEYS[1], offset)) == 0 then return false end end 使用 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/zeromicro/go-zero/core/bloom&amp;#34; &amp;#34;github.com/zeromicro/go-zero/core/stores/redis&amp;#34; ) func main() { store := redis.</description>
    </item>
    <item>
      <title>MySQL关于only_full_group_by限制</title>
      <link>https://ycchi0.github.io/posts/mysql%E5%85%B3%E4%BA%8Eonly_full_group_by%E9%99%90%E5%88%B6/</link>
      <pubDate>Tue, 28 May 2024 10:56:23 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/mysql%E5%85%B3%E4%BA%8Eonly_full_group_by%E9%99%90%E5%88%B6/</guid>
      <description>先上结论
如果 only_full_group_by 被启用，那么在查询时，如果某个列不在group by 列表中，此时如果不对该列进行聚合处理，则该列不能出现在 select 列表，having 条件中及order by 列表中
MySQL 8.0 默认启用了sql_mode，我们可以通过 select @@session.sql_mode 查看会话中的 sql_mode 配置。
mysql&amp;gt; SELECT @@session.sql_mode; +-----------------------------------------------------------------------------------------------------------------------+ | @@session.sql_mode | +-----------------------------------------------------------------------------------------------------------------------+ | ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION | +-----------------------------------------------------------------------------------------------------------------------+ 1 row in set (0.00 sec) 有这么一张表
CREATE TABLE `mytable` ( `id` int unsigned NOT NULL, `a` varchar(10) COLLATE utf8mb4_general_ci DEFAULT NULL, `b` int DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_general_ci; INSERT INTO mytable VALUES (1, &amp;#39;abc&amp;#39;, 1000), (2, &amp;#39;abc&amp;#39;, 2000), (3, &amp;#39;def&amp;#39;, 4000); 当我们执行的 SQL 语句包含聚合函数时，MYSQL 提示需要使用 GROUP BY 进行分组。</description>
    </item>
    <item>
      <title>SQL基础</title>
      <link>https://ycchi0.github.io/posts/sql%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 28 May 2024 10:51:29 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/sql%E5%9F%BA%E7%A1%80/</guid>
      <description>前言 在平时的工作中，大家可能是 ORM 战士。但是 ORM 之下，还是原生的 SQL。这是整理 SQL 基础时的一些记录。
DDL 数据定义语言,用来定义数据库对象，包括数据库、数据表和列。
DML 数据操作语言，用来操作和数据库相关的记录，比如增加、删除、修改数据表中的记录。
DCL 数据控制语言，用来定义访问权限和安全级别。
DQL 数据查询语言，用来查询想要的记录。
SQL语句书写规范 参考：
表名、表别名、字段名、字段别名等都小写
SQL 保留字、函数名、绑定变量等都大写
SQL 排序 ORDER BY ORDER BY 后面可以有一个或多个列名，如果是多个列名进行排序，会按照后面第一个列先进行排序，当第一列的值相同的时候，再按照第二列进行排序，以此类推。 ORDER BY 后面可以注明排序规则，ASC 代表递增排序，DESC 代表递减排序。默认情况下是按照 ASC 递增排序。 ORDER BY 可以使用非选择列进行排序，即使在 SELECT 后面没有这个列名，同样可以放到 ORDER BY 后面进行排序。 SELECT 的执行顺序 1.关键字语法顺序 SELECT ... FROM ... WHERE ... GROUP BY ... HAVING ... ORDER BY ... 其中 WHERE 和 HAVING 的区别在于，WHERE 是对数据行进行过滤，而 HAVING 是对分组数据进行过滤。
2.语句的执行顺序(以MySQL为例) FROM &amp;gt; WHERE &amp;gt; GROUP BY &amp;gt; HAVING &amp;gt; SELECT 的字段 &amp;gt; DISTINCT &amp;gt; ORDER BY &amp;gt; LIMIT (5)SELECT DISTINCT &amp;lt;select_list&amp;gt; (1)FROM &amp;lt;left_table&amp;gt; &amp;lt;join_type&amp;gt; JOIN &amp;lt;right_table&amp;gt; ON &amp;lt;on_predicate&amp;gt; (2)WHERE &amp;lt;where_predicate&amp;gt; (3)GROUP BY &amp;lt;group_by_specification&amp;gt; (4)HAVING &amp;lt;having_predicate&amp;gt; (6)ORDER BY &amp;lt;order_by_list&amp;gt; (7)LIMIT n, m 这些步骤执行时，每个步骤都会产生一个虚拟表，该虚拟表被用作下一个步骤的输入。这些虚拟表对调用者（客户端应用程序或者外部查询）无感知的。只有最后一步生成的表才会返回给调用者。如果没有在查询中指定某一子句，将跳过相应的步骤。</description>
    </item>
    <item>
      <title>CSS清除浮动</title>
      <link>https://ycchi0.github.io/posts/css%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</link>
      <pubDate>Tue, 28 May 2024 08:50:13 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/css%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</guid>
      <description>谈谈 BFC 当一个盒子没有设置 height, 而子盒子又都设置浮动时，此时这个盒子会塌陷。 如下：
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; .box { width: 600px; border: 10px solid #a89393; } .box .c1 { width: 300px; height: 200px; background-color: orange; float: left; } .box .c2 { width: 300px; height: 200px; background-color: blue; float: left; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;box&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;c1&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;c2&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 造成这个现象的原因，就是这个父盒子没有产生 BFC。
那么什么是 BFC 呢 ？ 根据 MDN 的定义，BFC(区块格式化上下文)是 Web 页面的可视 CSS 渲染的一部分，是块级盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。 下列方式会创建块格式化上下文： 本质上来说，只要创建了 BFC,浮动的问题就解决了。</description>
    </item>
    <item>
      <title>Vif和vshow</title>
      <link>https://ycchi0.github.io/posts/vif%E5%92%8Cvshow/</link>
      <pubDate>Fri, 24 May 2024 13:13:11 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/vif%E5%92%8Cvshow/</guid>
      <description>v-if 与 v-show 的共同点 v-if v-show 都是 Vue 中用来控制元素显示与否的。
v-if 与 v-show 的区别 v-show隐藏则是为该元素添加css&amp;ndash;display:none，dom元素依旧还在。v-if显示隐藏是将dom元素整个添加或删除
v-show 由false变为true的时候不会触发组件的生命周期
v-if由false变为true的时候，触发组件的beforeCreate、create、beforeMount、mounted钩子，由true变为false的时候触发组件的beforeDestory、destoryed方法
v-if 与 v-show 的使用场景 需要非常频繁地切换，则使用 v-show 较好
运行时条件很少改变时，则使用 v-if 较好</description>
    </item>
    <item>
      <title>在 VUE 中 ，如何正确使用 Compute、Watch 和 Methods </title>
      <link>https://ycchi0.github.io/posts/vue_compute_watch_function/</link>
      <pubDate>Fri, 24 May 2024 12:49:58 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/vue_compute_watch_function/</guid>
      <description>Vue 中 computed, watch 和 methods 区别 在Vue 中，我们有几种处理数据和逻辑的方式。
本文将重点探讨computed, watch 和 methods 的区别和使用场景。
computed 在Vue中，computed用于处理依赖其他属性的计算结果。它是由缓存的，只有当依赖项发生更改时，才会重新计算其结果。
setup() { const count = ref(0); const doubled = computed(() =&amp;gt; count.value * 2); return { count, doubled } } 我们创建了一个计算属性doubled，将count进行了两倍的计算。每当 count 更新时，doubled 也会自动更新。
watch watch用于观察和响应Vue组件中的数据更改。当被观察的数据源发生改变时，会触发一个回调函数。
在Vue中，computed和watch是两种常见的监听数据变化和执行逻辑的手段。它们在用法和应用场景上存在一些区别：
computed: 它用于处理依赖其他变量的计算结果。比如，你有两个变量 a 和 b，你想创建第三个变量 c，它是 a 和 b 的和。在这种情况下，你应该使用 computed。computed 属性有一个缓存机制，当依赖项没有发生改变时，它会直接返回上一次的计算结果，而不会再次执行函数。
watch: 它用来观察vue实例上的数据变动。需要注意的是，watch 是非缓存的，即只要观察的目标发生变化 watch 就会执行，无论是否真的需要（依赖的数据是否真正发生了改变）。watch 更适合于例如：当数据变化时需要执行异步或者较长时间的操作的场景。
另外 watch 还有跟多高阶用法和特性，本文不做讨论，具体可查询VUE 文档
下面的例子中，我们观察count的变化，并在每次count变化时打印出变化后和变化前的值。
setup() { const count = ref(0); watch(count, (newValue, oldValue) =&amp;gt; { console.</description>
    </item>
    <item>
      <title>VUE生命周期函数</title>
      <link>https://ycchi0.github.io/posts/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 24 May 2024 11:39:34 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/</guid>
      <description>学习 VUE, 就不得不了解 VUE 的生命周期函数。 下面这张图来自 VUE 官网
其中 setup 函数是 VUE3 新加入的特性， 通过组合式 API 可以让我们的代码更具有可读性和可维护性。
我们随便写点代码来验证一下
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;zh&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;VUE3 生命周期学习&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;#34;https://unpkg.com/vue@3/dist/vue.global.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;button @click=&amp;#34;changeMessage&amp;#34;&amp;gt;改变信息&amp;lt;/button&amp;gt; &amp;lt;button @click=&amp;#34;unmountComponent&amp;#34;&amp;gt;卸载组件&amp;lt;/button&amp;gt; &amp;lt;p&amp;gt;{{ message }}&amp;lt;/p&amp;gt; &amp;lt;child-component v-if=&amp;#34;!componentUnmounted&amp;#34; :message=&amp;#34;message&amp;#34; &amp;gt;&amp;lt;/child-component&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; const ChildComponent = { props: [&amp;#34;message&amp;#34;], beforeUnmount() { console.log(&amp;#34;beforeUnmount&amp;#34;); }, unmounted() { console.log(&amp;#34;unmounted&amp;#34;); }, template: `&amp;lt;p&amp;gt;{{ message }}&amp;lt;/p&amp;gt;`, }; const App = { data() { return { message: &amp;#34;Hello Vue3&amp;#34;, componentUnmounted: false, }; }, components: { &amp;#34;child-component&amp;#34;: ChildComponent, }, beforeCreate() { console.</description>
    </item>
    <item>
      <title>Box Sizing</title>
      <link>https://ycchi0.github.io/posts/box-sizing/</link>
      <pubDate>Fri, 24 May 2024 02:53:44 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/box-sizing/</guid>
      <description>CSS 中的 box-sizing 属性定义了 user agent 应该如何计算一个元素的总宽度和总高度。
怎么理解呢？
首先先明确一点，默认情况下，元素的宽度(width) 和高度(height)计算方式为：
width(宽度) + padding(内边距) + border(边框) = 元素实际宽度 height(高度) + padding(内边距) + border(边框) = 元素实际高度
而 box-sizing 属性可以被用来调整这些表现
content-box 是默认值。如果你设置一个元素的宽为 100px，那么这个元素的内容区会有 100px 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。 border-box ：设置的边框和内边距的值是包含在 width 内的。也就是说，如果你将一个元素的 width 设为 100px，那么这 100px 会包含它的 border 和 padding，内容区的实际宽度是 width 减去 (border + padding) 的值。大多数情况下，这使得我们更容易地设定一个元素的宽高。 我们来看下面的图： content-box 情况： border-box 情况： 浏览器兼容性如下： 参考文档MDN box-sizing</description>
    </item>
    <item>
      <title>CSS 浮动</title>
      <link>https://ycchi0.github.io/posts/css%E6%B5%AE%E5%8A%A8/</link>
      <pubDate>Thu, 23 May 2024 18:22:30 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/css%E6%B5%AE%E5%8A%A8/</guid>
      <description>先谈谈浮动 float 很多网站的布局都是通过 float 实现的，浮动最本质的功能就是用来实现并排。
一个例子 先来看一个例子，有三个未设置浮动的盒子，代码如下：
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; .box { width: 600px; height: 200px; border: 1px solid #000; } .box .c1 { width: 200px; height: 200px; background-color: orange; /* float: left; */ } .box .c2 { width: 200px; height: 200px; background-color: green; /* float: left; */ } .box .c3 { width: 200px; height: 200px; background-color: blue; /* float: left; */ } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;box&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;c1&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;c2&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;c3&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 当我们给三个盒子都设置浮动，即取消上面代码注释部分，盒子便可以横向编排。 浮动使用要点 浮动在使用时，有两个要点</description>
    </item>
    <item>
      <title>Art Template</title>
      <link>https://ycchi0.github.io/posts/art-template/</link>
      <pubDate>Thu, 23 May 2024 16:59:54 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/art-template/</guid>
      <description>art-template art-template 是一个简约、超快的模板引擎。采用作用域预声明的技术来优化模板渲染速度，从而获得接近 JavaScript 极限的运行性能，并且同时支持 NodeJS 和浏览器。
在一些动态渲染场景，使用 art-template 可以将 JS 代码与 Html 代码分开管理，便于项目维护。
比如说后端获取到一个 students 对象数组，现在要在界面上以列表的形式展示，我们可能会这样编写代码
student 对象数组为：
const students = [ { name: &amp;#34;xxx&amp;#34;, age: 18, }, { name: &amp;#34;yyy&amp;#34;, age: 28, }, { name: &amp;#34;zzz&amp;#34;, age: 20, }, ]; 使用模板字符串
const list = document.getElementById(&amp;#39;list&amp;#39;); let html = &amp;#39;&amp;#39;; for (const student of students) { html += `&amp;lt;li&amp;gt;${student.name} ${student.age}&amp;lt;/li&amp;gt;`; } list.innerHTML = html; 使用 art-template：
&amp;lt;script id=&amp;#34;tpl-students&amp;#34; type=&amp;#34;text/html&amp;#34;&amp;gt; {{each students}} &amp;lt;li&amp;gt;{{$value.</description>
    </item>
    <item>
      <title>谈谈Cookie</title>
      <link>https://ycchi0.github.io/posts/%E8%B0%88%E8%B0%88cookie/</link>
      <pubDate>Thu, 23 May 2024 15:30:15 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/%E8%B0%88%E8%B0%88cookie/</guid>
      <description>Cookie 是什么 Cookie 全称 HTTP Cookie，简称 Cookie,是浏览器存储数据的一种方式。Cookie 存储在用户本地，一般会自动随着浏览器每次请求发送到服务器端。
打开浏览器开发者工具，如下： Cookie 有什么用 可以利用 Cookie 跟踪统计用户访问该网站的习惯，比如什么时间访问，访问了哪些页面，在每个网页的停留时间等
注意：不要在 Cookie 中保存密码等敏感信息
Cookie 的基本用法 写入 Cookie &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script&amp;gt; document.cookie = &amp;#34;username=zs&amp;#34;; document.cookie = &amp;#34;age=18&amp;#34;; &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 读取 Cookie &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script&amp;gt; console.log(document.cookie); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Cookie 属性 最重要的两个属性 Cookie 的名称（Name）和值（Value） 是最重要的两个属性，创建 时必须填写，其它属性可以使用默认值。</description>
    </item>
    <item>
      <title>Webpack 从入门到放弃</title>
      <link>https://ycchi0.github.io/posts/webpack/</link>
      <pubDate>Thu, 23 May 2024 08:05:20 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/webpack/</guid>
      <description>Webpack 是什么 首先，webpack 是一个打包工具，它会根据代码的内容解析模块依赖，帮助我们把多个模块的代码打包。
借助一个官网的截图，让你感受一下 webpack 的强大。
日常使用的前端开发环境应该是怎样的？我们可以尝试着把基本前端开发环境的需求列一下：
构建我们发布需要的 HTML、CSS、JS 文件 使用 CSS 预处理器来编写样式 使用 Babel 来支持 ES 新特性 本地提供静态服务以方便开发调试 &amp;hellip;. 这些需求，使用 webpack 都可以较好的满足。
webpack 官方手册地址
先从一个简单的项目开始 1.初始化项目
npm init 2.安装 webpack 需要的包
npm install --save-dev webpack-cli@3.3.12 webpack@4.44.1 3.配置 webpack
在工程文件夹内新建 webpack.config.js
const path = require(&amp;#34;path&amp;#34;); module.exports = { entry: &amp;#34;./src/index.js&amp;#34;, output: { path: path.resolve(__dirname, &amp;#34;dist&amp;#34;), filename: &amp;#34;bundle.js&amp;#34;, }, }; 在 package.json 文件添加script命令：
&amp;#34;webpack&amp;#34;: &amp;#34;webpack --config webpack.config.js&amp;#34; 此时工程目录如下： 4.编译并测试
npm run webpack 执行命令后会发现工程目录下生成了 dist/bundle.</description>
    </item>
    <item>
      <title>Javascript Module 详解</title>
      <link>https://ycchi0.github.io/posts/javascript_module/</link>
      <pubDate>Wed, 22 May 2024 12:26:48 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/javascript_module/</guid>
      <description>什么是模块(Module) 模块，在 Js 可以看成一个一个局部作用域的代码块。
我们写代码时需要注意高内聚，低耦合，这就需要用到模块系统。它能帮助我们更好的划分代码功能，增加代码复用性，便于维护程序。
引入模块系统的好处：
代码模块化管理，便于复用 消除过多全局变量 管理加载顺序 Module 基本用法 一个文件就是一个模块。 如下是一个基本的用法： person.js
class Person { constructor(name) { this.name = name; } sayHi() { console.log(&amp;#34;hi&amp;#34;); } } export default Person; student.js
import Person from &amp;#34;./person&amp;#34;; class Student extends Person { constructor(name, age) { super(name); this.age = age; } } export default Student; index.js
import Student from &amp;#34;./student&amp;#34;; let s = new Student(&amp;#34;zs&amp;#34;,10); script 标签加载的时候，需要加上 type=&amp;ldquo;module&amp;rdquo; demo.html
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.</description>
    </item>
    <item>
      <title>Javascript ES6 Class 深入浅出</title>
      <link>https://ycchi0.github.io/posts/javascript_es6_class/</link>
      <pubDate>Wed, 22 May 2024 01:29:33 +0000</pubDate>
      <guid>https://ycchi0.github.io/posts/javascript_es6_class/</guid>
      <description>初识 Class Javascript 中的类基于 Prototype 创建，一般类需要大写。 下面是一个简单的 Person 类示例，constructor 是构造函数，用来给类的对象进行初始化。
class Person { constructor(name, age) { //this 代表实例对象，上面定义的是实例属性/方法 this.name = name; this.age = age; } // 各实例共享的方法 sayHi() { console.log(&amp;#34;sayHi&amp;#34;); } } let zs = new Person(&amp;#34;zhangsan&amp;#34;, 18); zs.sayHi(); 上面的 Person 类等同于下面 Prototype-based 写法
function Person(name, age) { this.name = name; this.age = age; } Person.prototype.sayHi = function () { console.log(&amp;#34;Prototype-based&amp;#34;); }; let zs = new Person(&amp;#34;zhangsan&amp;#34;, 18); zs.sayHi(); 立即执行的匿名类 new (class { constructor() { console.</description>
    </item>
  </channel>
</rss>
